// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/01/2024 16:03:42"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    PARTE_E
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PARTE_E_vlg_sample_tst(
	clock,
	fin_dato,
	fin_dir,
	reset,
	SDA,
	soy,
	sampler_tx
);
input  clock;
input  fin_dato;
input  fin_dir;
input  reset;
input  SDA;
input  soy;
output sampler_tx;

reg sample;
time current_time;
always @(clock or fin_dato or fin_dir or reset or SDA or soy)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module PARTE_E_vlg_check_tst (
	Hab_ACK,
	Hab_Dat,
	Hab_Dir,
	sampler_rx
);
input  Hab_ACK;
input  Hab_Dat;
input  Hab_Dir;
input sampler_rx;

reg  Hab_ACK_expected;
reg  Hab_Dat_expected;
reg  Hab_Dir_expected;

reg  Hab_ACK_prev;
reg  Hab_Dat_prev;
reg  Hab_Dir_prev;

reg  Hab_ACK_expected_prev;
reg  Hab_Dat_expected_prev;
reg  Hab_Dir_expected_prev;

reg  last_Hab_ACK_exp;
reg  last_Hab_Dat_exp;
reg  last_Hab_Dir_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	Hab_ACK_prev = Hab_ACK;
	Hab_Dat_prev = Hab_Dat;
	Hab_Dir_prev = Hab_Dir;
end

// update expected /o prevs

always @(trigger)
begin
	Hab_ACK_expected_prev = Hab_ACK_expected;
	Hab_Dat_expected_prev = Hab_Dat_expected;
	Hab_Dir_expected_prev = Hab_Dir_expected;
end



// expected Hab_ACK
initial
begin
	Hab_ACK_expected = 1'bX;
	Hab_ACK_expected = #999000 1'b0;
end 

// expected Hab_Dat
initial
begin
	Hab_Dat_expected = 1'bX;
	Hab_Dat_expected = #999000 1'b0;
end 

// expected Hab_Dir
initial
begin
	Hab_Dir_expected = 1'bX;
	Hab_Dir_expected = #999000 1'b0;
end 
// generate trigger
always @(Hab_ACK_expected or Hab_ACK or Hab_Dat_expected or Hab_Dat or Hab_Dir_expected or Hab_Dir)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Hab_ACK = %b | expected Hab_Dat = %b | expected Hab_Dir = %b | ",Hab_ACK_expected_prev,Hab_Dat_expected_prev,Hab_Dir_expected_prev);
	$display("| real Hab_ACK = %b | real Hab_Dat = %b | real Hab_Dir = %b | ",Hab_ACK_prev,Hab_Dat_prev,Hab_Dir_prev);
`endif
	if (
		( Hab_ACK_expected_prev !== 1'bx ) && ( Hab_ACK_prev !== Hab_ACK_expected_prev )
		&& ((Hab_ACK_expected_prev !== last_Hab_ACK_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hab_ACK :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hab_ACK_expected_prev);
		$display ("     Real value = %b", Hab_ACK_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Hab_ACK_exp = Hab_ACK_expected_prev;
	end
	if (
		( Hab_Dat_expected_prev !== 1'bx ) && ( Hab_Dat_prev !== Hab_Dat_expected_prev )
		&& ((Hab_Dat_expected_prev !== last_Hab_Dat_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hab_Dat :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hab_Dat_expected_prev);
		$display ("     Real value = %b", Hab_Dat_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Hab_Dat_exp = Hab_Dat_expected_prev;
	end
	if (
		( Hab_Dir_expected_prev !== 1'bx ) && ( Hab_Dir_prev !== Hab_Dir_expected_prev )
		&& ((Hab_Dir_expected_prev !== last_Hab_Dir_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Hab_Dir :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Hab_Dir_expected_prev);
		$display ("     Real value = %b", Hab_Dir_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_Hab_Dir_exp = Hab_Dir_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#64000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module PARTE_E_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg fin_dato;
reg fin_dir;
reg reset;
reg SDA;
reg soy;
// wires                                               
wire Hab_ACK;
wire Hab_Dat;
wire Hab_Dir;

wire sampler;                             

// assign statements (if any)                          
PARTE_E i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.fin_dato(fin_dato),
	.fin_dir(fin_dir),
	.Hab_ACK(Hab_ACK),
	.Hab_Dat(Hab_Dat),
	.Hab_Dir(Hab_Dir),
	.reset(reset),
	.SDA(SDA),
	.soy(soy)
);

// clock
always
begin
	clock = 1'b0;
	clock = #500000 1'b1;
	#500000;
end 

// SDA
always
begin
	SDA = 1'b0;
	SDA = #1000000 1'b1;
	#1000000;
end 

// fin_dato
always
begin
	fin_dato = 1'b0;
	fin_dato = #2000000 1'b1;
	#2000000;
end 

// fin_dir
always
begin
	fin_dir = 1'b0;
	fin_dir = #4000000 1'b1;
	#4000000;
end 

// reset
initial
begin
	reset = 1'b0;
end 

// soy
initial
begin
	soy = 1'b1;
end 

PARTE_E_vlg_sample_tst tb_sample (
	.clock(clock),
	.fin_dato(fin_dato),
	.fin_dir(fin_dir),
	.reset(reset),
	.SDA(SDA),
	.soy(soy),
	.sampler_tx(sampler)
);

PARTE_E_vlg_check_tst tb_out(
	.Hab_ACK(Hab_ACK),
	.Hab_Dat(Hab_Dat),
	.Hab_Dir(Hab_Dir),
	.sampler_rx(sampler)
);
endmodule

